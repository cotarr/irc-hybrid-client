{
	"info": {
		"name": "irc-hybrid-client websocket auth tests",
		"description": "# Tests associated with browser to server websocket\n- Suggest delete cookie before running tests.\n- Assign a temporary user/password in the web server for testing.\n- In Postman, create a environment with the variables listed below. Set values to the temporary user/password and server URL.\n- A series of tests is run to test the websocket authroization.\n\n# Enviornment\n- server_URL\n- server_user1\n- server_password1\n- irc_nickname\n- irc_channel\n- sever_die (\"YES\" or \"NO\")",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "5.1 /logout (clear old sessions)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html"
					}
				],
				"url": {
					"raw": "{{server_URL}}/logout",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"logout"
					]
				},
				"description": "Request /logout route to remove previous session authorizatin."
			},
			"response": []
		},
		{
			"name": "5.2 /login (get nonce, csrfToken)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Fail if already logged in\", function () {",
							"    // If already logged in, then redirect to main page. The nonce can not be tested.     ",
							"    let statusCode = pm.response.code;",
							"    if (statusCode === 302) {",
							"      console.log('You can not get a nonce while logged in, use /logout');",
							"    }",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//",
							"// This assumes that the nonce is in the 23 quote delimitered string fragment.",
							"//",
							"pm.test(\"Parse the random nonce from login form\", function () {",
							"    pm.globals.unset('server_nonce');",
							"",
							"    // get response body as string (find the one with the nonce)",
							"    let arrayOfQuotedStrings = pm.response.text().split('\"')",
							"    // console.log(arrayOfQuotedStrings)",
							"    ",
							"    // Extract n-th the string fragment with nonce from array",
							"    // Example: /login-authorize?nonce=lWCgTNWj",
							"    let actionPath = arrayOfQuotedStrings[19];",
							"    // console.log(actionPath);",
							"    ",
							"    // Extract nonce as string.",
							"    // Example: lWCgTNWj",
							"    let parsedNonce = actionPath.split('=')[1];",
							"    // console.log(parsedNonce);",
							"    if ((parsedNonce) && (parsedNonce.length > 0)) {",
							"        pm.globals.set('server_nonce', parsedNonce);",
							"        console.log('/login has set lobal variable server_nonce set to: ' + pm.globals.get('server_nonce'));",
							"    }",
							"    ",
							"    pm.expect(parsedNonce).to.have.lengthOf.above(1);",
							"});",
							"",
							"pm.test(\"Extract CSRF token to global variables\", function () {",
							"    let body = pm.response.text();",
							"    let bodyArray = body.split('\\n');",
							"    let csrfToken = '';",
							"    for (let i = 0; i < bodyArray.length; i++) {",
							"        let splitByQuote = bodyArray[i].split('\"');",
							"        if ((splitByQuote.length === 7) && (splitByQuote[3] === '_csrf')) {",
							"            csrfToken = splitByQuote[5];",
							"        }",
							"    } // next i",
							"    console.log('/login has set global variable csrf_token to: ', csrfToken);",
							"    pm.globals.set('csrf_token', csrfToken);",
							"});",
							"",
							"",
							"pm.test(\"Has header to set cookie\", function () {",
							"    pm.response.to.have.header(\"Set-Cookie\");",
							"});",
							"",
							"pm.test(\"Has received cookie\", function() {",
							"    pm.expect(pm.cookies.has('irc-hybrid-client-0')).to.be.true; ",
							"});",
							"",
							"pm.test(\"Response has body\", function () {",
							"    pm.response.to.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/css"
					}
				],
				"url": {
					"raw": "{{server_URL}}/login",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"login"
					]
				},
				"description": "This will request a login form, then extract the login random nonce from the login form, then temporally save the login nonce as a global variable for use in the authorize request"
			},
			"response": []
		},
		{
			"name": "5.3 /login-authorize success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 302\", function () {",
							"    pm.response.to.have.status(302);",
							"});",
							"",
							"pm.globals.unset(\"server_nonce\");",
							"",
							"pm.test(\"Redirect address is /irc/webclient.html\", function () {",
							"    let location = pm.response.headers.get('Location');",
							"    pm.expect(location).to.equal('/irc/webclient.html')",
							"});",
							"",
							"pm.test(\"Has received cookie\", function() {",
							"    pm.expect(pm.cookies.has('irc-hybrid-client-0')).to.be.true; ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user",
							"value": "{{server_user1}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{server_password1}}",
							"type": "text"
						},
						{
							"key": "_csrf",
							"value": "{{csrf_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server_URL}}/login-authorize?nonce={{server_nonce}}",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"login-authorize"
					],
					"query": [
						{
							"key": "nonce",
							"value": "{{server_nonce}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5.4 /irc/wsauth websocket auth request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "CSRF-Token",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"purpose\": \"websocket-auth\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_URL}}/irc/wsauth",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"irc",
						"wsauth"
					]
				},
				"description": "This is a preliminary setup call. On the server end, this call will initiate a server-side timer. This his creates a window during which websocket connections will be accepted. The websocket request requires a valid cookie. The contents of the body are ignored and not used by the server."
			},
			"response": []
		},
		{
			"name": "5.5 /irc/ws (Auth succeeds, expect 400)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//",
							"// Postman can not connect a websocket",
							"// If the auth succeds, then the attempt will return a 405 Method Not Allowed",
							"// Note: In early versions of irc-hybrid-client, it returned 400 Bad Request (probable library change)",
							"// If the auth fails, the attempt will return a 401 Unauthorized.",
							"pm.test(\"Status code is 400 Unauthorized\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "connection",
						"value": "Upgrade",
						"description": "For upgrade to websocket",
						"type": "text"
					},
					{
						"key": "upgrade",
						"value": "websocket",
						"description": "For upgrade to websocket",
						"type": "text"
					},
					{
						"key": "CSRF-Token",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"purpose\": \"websocket-auth\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_URL}}/irc/ws",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"irc",
						"ws"
					]
				},
				"description": "This will set headers necessary to issue and upgrade request to generate a web socket connection. Since a postman GET request can not open an actual websocket, the expected response is 400 Bad Request (GET request to websocket upgrade)"
			},
			"response": []
		},
		{
			"name": "6.1 /irc/wsauth websocket auth request (save previous cookie nonce)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "CSRF-Token",
						"value": "{{csrf_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"purpose\": \"websocket-auth\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_URL}}/irc/wsauth",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"irc",
						"wsauth"
					]
				},
				"description": "This is a preliminary follow up call. A new timer will be started and the cookie hash will be saved. In the next steps, the backend data will be changed to intentionally cause a mis-match for the test."
			},
			"response": []
		},
		{
			"name": "6.2 /logout (remove previous cookie)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/html"
					}
				],
				"url": {
					"raw": "{{server_URL}}/logout",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"logout"
					]
				},
				"description": "Remove session authorization associated with this session cookie. Removing the session will remove any pending websocket hash value. This is a setup step so the pending websocket UPGRADE request will not match."
			},
			"response": []
		},
		{
			"name": "6.3 /login get valid nonce (to change cookie)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Fail if already logged in\", function () {",
							"    // If already logged in, then redirect to main page. The nonce can not be tested.     ",
							"    let statusCode = pm.response.code;",
							"    if (statusCode === 302) {",
							"      console.log('You can not get a nonce while logged in, use /logout');",
							"    }",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//",
							"// This assumes that the nonce is in the 23 quote delimitered string fragment.",
							"//",
							"pm.test(\"Parse the random nonce from login form\", function () {",
							"    pm.globals.unset('server_nonce');",
							"",
							"    // get response body as string (find the one with the nonce)",
							"    let arrayOfQuotedStrings = pm.response.text().split('\"')",
							"    // console.log(arrayOfQuotedStrings)",
							"    ",
							"    // Extract n-th the string fragment with nonce from array",
							"    // Example: /login-authorize?nonce=lWCgTNWj",
							"    let actionPath = arrayOfQuotedStrings[19];",
							"    // console.log(actionPath);",
							"    ",
							"    // Extract nonce as string.",
							"    // Example: lWCgTNWj",
							"    let parsedNonce = actionPath.split('=')[1];",
							"    // console.log(parsedNonce);",
							"    if ((parsedNonce) && (parsedNonce.length > 0)) {",
							"        pm.globals.set('server_nonce', parsedNonce);",
							"        console.log('/login has set lobal variable server_nonce set to: ' + pm.globals.get('server_nonce'));",
							"    }",
							"    ",
							"    pm.expect(parsedNonce).to.have.lengthOf.above(1);",
							"});",
							"",
							"pm.test(\"Extract CSRF token to global variables\", function () {",
							"    let body = pm.response.text();",
							"    let bodyArray = body.split('\\n');",
							"    let csrfToken = '';",
							"    for (let i = 0; i < bodyArray.length; i++) {",
							"        let splitByQuote = bodyArray[i].split('\"');",
							"        if ((splitByQuote.length === 7) && (splitByQuote[3] === '_csrf')) {",
							"            csrfToken = splitByQuote[5];",
							"        }",
							"    } // next i",
							"    console.log('/login has set global variable csrf_token to: ', csrfToken);",
							"    pm.globals.set('csrf_token', csrfToken);",
							"});",
							"",
							"pm.test(\"Has header to set cookie\", function () {",
							"    pm.response.to.have.header(\"Set-Cookie\");",
							"});",
							"",
							"pm.test(\"Has received cookie\", function() {",
							"    pm.expect(pm.cookies.has('irc-hybrid-client-0')).to.be.true; ",
							"});",
							"",
							"pm.test(\"Response has body\", function () {",
							"    pm.response.to.have.body();",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/css"
					}
				],
				"url": {
					"raw": "{{server_URL}}/login",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"login"
					]
				},
				"description": "This will request a login form, then extract the login random nonce from the login form, then temporally save the login nonce as a global variable for use in the authorize request"
			},
			"response": []
		},
		{
			"name": "6.4 /login-authorize success (now different cookie)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 302\", function () {",
							"    pm.response.to.have.status(302);",
							"});",
							"",
							"pm.globals.unset(\"server_nonce\");",
							"",
							"pm.test(\"Redirect address is /irc/webclient.html\", function () {",
							"    let location = pm.response.headers.get('Location');",
							"    pm.expect(location).to.equal('/irc/webclient.html')",
							"});",
							"",
							"pm.test(\"Has received cookie\", function() {",
							"    pm.expect(pm.cookies.has('irc-hybrid-client-0')).to.be.true; ",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "user",
							"value": "{{server_user1}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{server_password1}}",
							"type": "text"
						},
						{
							"key": "_csrf",
							"value": "{{csrf_token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{server_URL}}/login-authorize?nonce={{server_nonce}}",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"login-authorize"
					],
					"query": [
						{
							"key": "nonce",
							"value": "{{server_nonce}}"
						}
					]
				},
				"description": "This associates the postman cookie with a new  session. Since a websocket request is pending, the new session will intentionally not match the pending websocket request."
			},
			"response": []
		},
		{
			"name": "6.5 /irc/ws (Auth fails, expect 401)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//",
							"// Postman can not connect a websocket",
							"// If the auth succeds, then the attempt will return a 400 Bad Request",
							"// If the auth fails, the attempt will return a 401 Unauthorized.",
							"pm.test(\"Status code is 401 Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "connection",
						"value": "Upgrade",
						"description": "For upgrade to websocket",
						"type": "text"
					},
					{
						"key": "upgrade",
						"value": "websocket",
						"description": "For upgrade to websocket",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"purpose\": \"websocket-auth\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{server_URL}}/irc/ws",
					"host": [
						"{{server_URL}}"
					],
					"path": [
						"irc",
						"ws"
					]
				},
				"description": "This is a websocket upgrade. The current cookie hash will not match the saved cache, so authorization failure is expected and 401 Unauthorized is tested."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}